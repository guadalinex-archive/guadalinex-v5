#!/bin/bash
#
# Do install stuff for powerpc/ps3, including making bootable CDs
# Works with debian-installer
#
# $1 is the CD number
# $2 is the temporary CD build dir

. $BASEDIR/tools/boot/$DI_CODENAME/common.sh

set -e

N=$1
CDDIR=$2
INSTALLDIR=$CDDIR/install
if [ "$DI_WWW_HOME" = "default" ];then
   DI_WWW_HOME="http://people.debian.org/~luther/d-i/images/daily"
fi
if [ ! "$DI_DIST" ]; then
   export DI_DIST="$DI_CODENAME"
fi
if [ -z "$DI_PATH" ]; then
   DI_PATH="$($BASEDIR/tools/find-newest-installer)"
fi

default_preseed

cd $CDDIR/..

# Only disk 1* bootable
if [ $N != 1 -a $N != 1_NONUS ]; then
    :> $N.mkisofs_opts
    exit 0
fi

install_languages $CDDIR

echo -n "-cache-inodes -J -l" > $N.mkisofs_opts

"$BASEDIR/tools/sorting_weights" "$N"
echo -n " -sort $(pwd)/$N.weights " >> $N.mkisofs_opts

cd $CDDIR
mkdir -p PS3/otheros
if [ -z "$KBOOT_DEBUG" ]; then
    KBOOTDEB="$($BASEDIR/tools/apt-selection cache show ps3-kboot | \
		grep ^Filename | awk '{print $2}')"
    ar p "$MIRROR/$KBOOTDEB" data.tar.gz | tar -xzf - -C . ./boot/otheros.bld
    mv boot/otheros.bld PS3/otheros/
    rmdir boot
else
    cp -f $KBOOT_DEBUG PS3/otheros/otheros.bld
fi

mkdir -p etc

BUILD_DATE="${CDIMAGE_DATE:-$(date +%Y%m%d)}"
(if [ "$CDIMAGE_DVD" = 1 ] && [ "$CDIMAGE_LIVE" = 1 ]; then
     cat $BASEDIR/data/$CODENAME/kboot/kboot.msg.dvd
 elif [ "$CDIMAGE_INSTALL" = 1 ]; then
     cat $BASEDIR/data/$CODENAME/kboot/kboot.msg.install
 elif [ "$CDIMAGE_LIVE" = 1 ]; then
     cat $BASEDIR/data/$CODENAME/kboot/kboot.msg.live
 fi) \
 | sed "s/\${MEDIA_TYPE}/CDROM/" \
 | sed "s/\${DEBIAN_VERSION}/${DEBVERSION}/g" \
 | sed "s/\${CODENAME}/${CAPCODENAME}/g" \
 | sed "s/\${BUILD_DATE}/${BUILD_DATE}/g" \
 | sed "s#Ubuntu#$CAPPROJECT#g" \
 > etc/kboot.msg

echo 'message=/etc/kboot.msg' > etc/kboot.conf

if [ "$CDIMAGE_LIVE" = 1 ]; then
    echo 'timeout=300' >> etc/kboot.conf
fi

if [ "$CDIMAGE_LIVE" = 1 ]; then
    echo 'default=live' >> etc/kboot.conf
else
    echo 'default=install' >> etc/kboot.conf
fi
if [ "$CDIMAGE_LIVE" = 1 ]; then
    cat >> etc/kboot.conf <<EOF
live='/casper/vmlinux initrd=/casper/initrd.gz $KERNEL_PARAMS $DEFAULT_PRESEED boot=casper quiet splash --'
live_nosplash='/casper/vmlinux initrd=/casper/initrd.gz $KERNEL_PARAMS $DEFAULT_PRESEED boot=casper quiet --'
driverupdates='/casper/vmlinux initrd=/casper/initrd.gz $KERNEL_PARAMS $DEFAULT_PRESEED boot=casper debian-installer/driver-update=true quiet splash --'
EOF
fi
if [ "$CDIMAGE_INSTALL" = 1 ]; then
    cat >> etc/kboot.conf <<EOF
install='/install/vmlinux initrd=/install/initrd.gz $KERNEL_PARAMS $DEFAULT_PRESEED quiet --'
expert='/install/vmlinux initrd=/install/initrd.gz $KERNEL_PARAMS $DEFAULT_PRESEED priority=low --'
EOF
    if [ "$PROJECT" = edubuntu ]; then
	cat >> etc/kboot.conf <<EOF
workstation='/install/vmlinux initrd=/install/initrd.gz $KERNEL_PARAMS file=/cdrom/preseed/workstation.seed quiet --'
EOF
    fi
    if [ "$PROJECT" != edubuntu ] && [ "$PROJECT" != ubuntu-server ]; then
	cat >> etc/kboot.conf <<EOF
oem='/install/vmlinux initrd=/install/initrd.gz $KERNEL_PARAMS $DEFAULT_PRESEED anna/choose_modules=oem-config-udeb quiet --'
EOF
    fi
fi
if [ "$CDIMAGE_INSTALL_BASE" = 1 ] && [ "$PROJECT" != ubuntu-server ]; then
    cat >> etc/kboot.conf <<EOF
cli='/install/vmlinux initrd=/install/initrd.gz $KERNEL_PARAMS file=/cdrom/preseed/cli.seed --'
cli_expert='/install/vmlinux initrd=/install/initrd.gz $KERNEL_PARAMS file=/cdrom/preseed/cli.seed priority=low --'
EOF
fi
if [ "$CDIMAGE_INSTALL" = 1 ] && [ "$PROJECT" = xubuntu ]; then
    cat >> etc/kboot.conf <<EOF
ltsp_server='/install/vmlinux initrd=/install/initrd.gz $KERNEL_PARAMS file=/cdrom/preseed/ltsp.seed --'
EOF
fi
if [ "$CDIMAGE_LIVE" = 1 ]; then
    cat >> etc/kboot.conf <<EOF
check='/casper/vmlinux initrd=/casper/initrd.gz $KERNEL_PARAMS boot=casper integrity-check quiet splash --'
EOF
elif [ "$CDIMAGE_INSTALL_BASE" = 1 ]; then
    cat >> etc/kboot.conf <<EOF
check='/install/vmlinux initrd=/install/initrd.gz $KERNEL_PARAMS MENU=/bin/cdrom-checker-menu quiet --'
rescue='/install/vmlinux initrd=/install/initrd.gz $KERNEL_PARAMS rescue/enable=true --'
EOF
fi

cd $INSTALLDIR

if [ ! "$DI_WWW_HOME" ]; then
    cp -a "$DI_PATH/current/images/udeb.list" .
else
    wget "$DI_WWW_HOME/udeb.list"
fi

if [ ! "$DI_WWW_HOME" ];then
    DI_DIR="$DI_PATH/current/images/powerpc64/cdrom"
else
    DI_DIR="di_stuff"
    for image in initrd.gz vmlinux; do
	dir="$(dirname "$image")"
	mkdir -p "$DI_DIR/$dir"
	wget "$DI_WWW_HOME/powerpc64/cdrom/$image" -O "$DI_DIR/$image"
    done
fi
if [ "$CDIMAGE_INSTALL_BASE" = 1 ]; then
    cp -dR --preserve=mode,timestamps "$DI_DIR"/* .
    rm -rf di_stuff
    # Remove special initrds we don't want.
    rm -f vmlinuz-*.initrd
fi
if [ "$CDIMAGE_LIVE" = 1 ]; then
    mkdir -p "$CDDIR/casper"
    mv "$CDDIR/casper/filesystem.kernel-powerpc64-smp" "$CDDIR/casper/vmlinux"
    mv "$CDDIR/casper/filesystem.initrd-powerpc64-smp" "$CDDIR/casper/initrd.gz"
fi

exit 0
