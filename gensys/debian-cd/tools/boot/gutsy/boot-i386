#!/bin/bash
#
# Do install stuff for i386, including making bootable CDs
# Works with debian-installer
#
# $1 is the CD number
# $2 is the temporary CD build dir

. $BASEDIR/tools/boot/$DI_CODENAME/common.sh

set -e

N=$1
CDDIR=$2
BOOTDIR=
if [ "$DI_WWW_HOME" = "default" ];then
   DI_WWW_HOME="http://people.debian.org/~joeyh/d-i/images/daily"
fi
if [ ! "$DI_DIST" ]; then
   export DI_DIST="$DI_CODENAME"
fi
if [ -z "$DI_PATH" ]; then
   DI_PATH="$($BASEDIR/tools/find-newest-installer)"
fi

default_preseed

cd $CDDIR/..

#
# This script is called with $1 (now $N) as the CD to 
# make bootable.  N may be in the form "n" or "n_NONUS"
# There may be more than 4 disks...support extras.

# Strip NONUS part of disk number
# NN will be 1...N so it can be used as an index
#
NN=`echo $N | sed -e 's/_NONUS//'`

# List of boot image for each CD
KTYPE[1]="" #isolinux multiboot in fact
KTYPE[2]=""
# XXX add net-image back when it's fixed
KTYPE[3]=""
KTYPE[4]=""
KTYPE[5]=""
KTYPE[6]=""
KTYPE[7]=""
KTYPE[8]=""
KTYPE[9]=""
KTYPE[10]=""

THISTYPE=${KTYPE[$NN]}

BOOT_IMAGES="udeb.list cdrom/initrd.gz cdrom/vmlinuz cdrom/debian-cd_info.tar.gz"
DISK_IMAGES=""
TAR_IMAGES="netboot/netboot.tar.gz"

# Download boot images
for image in $BOOT_IMAGES $DISK_IMAGES $TAR_IMAGES; do
    if [ ! -e "$image" ]; then
	dir=$(dirname $image)
	mkdir -p $dir
	if [ ! "$DI_WWW_HOME" ];then
		cp "$DI_PATH/current/images/$image" "$image"
	else
		wget "$DI_WWW_HOME/$image" -O "$image"
	fi
    fi
done

if [ "$NN" = "1" ]; then
    echo "Using ISOLINUX boot-disks image on CD$N"
    mkdir -p boot$N/isolinux
    SYSLINUXDEB="$($BASEDIR/tools/apt-selection cache show syslinux | \
	grep ^Filename | awk '{print $2}')"
    (ar p "$MIRROR/$SYSLINUXDEB" data.tar.gz | \
	tar zxf - -C . ./usr/lib/syslinux/isolinux.bin)
    mv usr/lib/syslinux/isolinux.bin boot$N/isolinux/

    GFXBOOT=
    if THEMEDEB="$($BASEDIR/tools/apt-selection cache show gfxboot-theme-ubuntu)"; then
	THEMEDEB="$(echo "$THEMEDEB" | grep ^Filename | awk '{print $2}')"
	ar p "$MIRROR/$THEMEDEB" data.tar.gz | tar zxf - -C . ./usr/share/gfxboot-theme-ubuntu/bootlogo.tar.gz
	tar zxf usr/share/gfxboot-theme-ubuntu/bootlogo.tar.gz -C boot$N/isolinux
	GFXBOOT=1
    fi

    rm -rf usr
    if [ "$CDIMAGE_INSTALL_BASE" = 1 ]; then
	cp -lf cdrom/vmlinuz $CDDIR/install/
	cp -lf cdrom/initrd.gz $CDDIR/install/
    fi
    if [ "$CDIMAGE_LIVE" = 1 ]; then
	mv $CDDIR/casper/filesystem.kernel-generic $CDDIR/casper/vmlinuz
	mv $CDDIR/casper/filesystem.initrd-generic $CDDIR/casper/initrd.gz
    fi
    echo -n "-cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table " > $N.mkisofs_opts
else
    if [ -n "$THISTYPE" ]; then
	echo "Using $THISTYPE boot-disks image on CD$N"
	mkdir -p boot$N/boot
	cp $THISTYPE/boot.img boot$N/boot/
	echo -n "-cache-inodes -J -l -b boot/boot.img "  > $N.mkisofs_opts
    else
	mkdir boot$N
	echo -n "-cache-inodes -J -l " > $N.mkisofs_opts
    fi
fi

"$BASEDIR/tools/sorting_weights" "$N" boot$N/isolinux/isolinux.bin boot$N/isolinux/boot.cat
echo -n "-sort $(pwd)/$N.weights " >> $N.mkisofs_opts

#install_languages $CDDIR

# Only disk one gets the extra files installed
#
if [ "$NN" = "1" ]; then


# populate the install directory as well
for disk in $DISK_IMAGES; do
	dir=$(dirname $disk)
	mkdir -p $CDDIR/install/$dir
	cp -lf $disk $CDDIR/install/$dir
done

if [ "$CDIMAGE_INSTALL" = 1 ]; then
	for tar in $TAR_IMAGES; do
		dir=$(dirname $tar)
		mkdir -p $CDDIR/install/$dir
		tar -C $CDDIR/install/$dir -xzpf $tar
	done
fi

# ISOLINUX setup

# Include Smart Boot Manager image for people where isolinux fails
gzip -dc $BASEDIR/data/$DI_CODENAME/sbm.bin.gz > $CDDIR/install/sbm.bin
# Keep the original file timestamp
touch -r $BASEDIR/data/$DI_CODENAME/sbm.bin.gz $CDDIR/install/sbm.bin
cp -p $BASEDIR/data/$DI_CODENAME/README.sbm $CDDIR/install/
# Extract memtest86+ from the archive
MEMTEST86DEB="$($BASEDIR/tools/apt-selection cache show memtest86+ | \
	grep ^Filename | awk '{print $2}')"
ar p "$MIRROR/$MEMTEST86DEB" data.tar.gz | \
	tar xzf - -C $CDDIR/install/ ./boot/memtest86+.bin
mv $CDDIR/install/boot/memtest86+.bin $CDDIR/install/mt86plus
rm -rf $CDDIR/install/boot
# Isolinux help files come from d-i.
cat cdrom/debian-cd_info.tar.gz | (cd boot$N/isolinux/; tar zx)
# Override splash screen.
if [ "$SPLASHRLE" ] && [ -e "$SPLASHRLE" ]; then
    cp -p "$SPLASHRLE" boot$N/isolinux/splash.rle
fi
if [ "$GFXSPLASH" ] && [ -e "$GFXSPLASH" ]; then
    cp -p "$GFXSPLASH" boot$N/isolinux/splash.pcx
fi
# Remove elilo configuration; only for Macs.
rm -f boot$N/isolinux/elilo*
rm -f boot$N/isolinux/*.msg*
if [ "$CDIMAGE_INSTALL" = 1 ]; then
    rm -f boot$N/isolinux/*.txt.live
    rm -f boot$N/isolinux/*.hlp.live
else
    for x in boot$N/isolinux/*.txt.live; do
	[ -f "$x" ] || continue
	mv "$x" "${x%.live}"
    done
    for x in boot$N/isolinux/*.hlp.live; do
	[ -f "$x" ] || continue
	mv "$x" "${x%.live}"
    done
fi
if [ "$CDIMAGE_DVD" = 1 ] && [ "$CDIMAGE_LIVE" = 1 ]; then
    # overrides; these should go in debian-installer instead
    for x in $BASEDIR/data/$DI_CODENAME/isolinux/*.txt.dvd; do
	base="${x##*/}"
	cp -p "$x" "boot$N/isolinux/${base%.dvd}"
    done
fi
if [ "$PROJECT" = ubuntu-server ]; then
    # last-minute override for ubuntu-server
    for x in $BASEDIR/data/$DI_CODENAME/isolinux/*.txt.server; do
	base="${x##*/}"
	cp -p "$x" "boot$N/isolinux/${base%.server}"
    done
fi

# Set up-to-date build dates. Kludgy because d-i sets its own version as
# the build date.
DI_VERSION="$(perl -lne 'if (/built on ([0-9a-z]*)/) { print $1 }' \
			"boot$N/isolinux/f1.txt")"
if [ "$DI_VERSION" ]; then
    : "${CDIMAGE_DATE:=$(date +%Y%m%d)}"
    sed -i "s/$DI_VERSION/$CDIMAGE_DATE/g" \
	"boot$N"/isolinux/*.txt "boot$N"/isolinux/*.hlp
fi

if [ "$CDIMAGE_LIVE" = 1 ]; then
    timeout=300
else
    timeout=0
fi
sed -e "s#Ubuntu#$CAPPROJECT#g" boot$N/isolinux/boot.txt \
    > boot$N/isolinux/isolinux.txt
rm -f boot$N/isolinux/boot.txt
# Isolinux config file.
if [ "$CDIMAGE_LIVE" = 1 ]; then
    DEFAULT_KERNEL=/casper/vmlinuz
else
    DEFAULT_KERNEL=/install/vmlinuz
fi
cat > boot$N/isolinux/isolinux.cfg <<EOF
DEFAULT $DEFAULT_KERNEL
EOF
if [ "$GFXBOOT" ]; then
    cat >> boot$N/isolinux/isolinux.cfg <<EOF
GFXBOOT bootlogo
EOF
    if [ "$PROJECT" = ubuntu ]; then
	cat >> boot$N/isolinux/isolinux.cfg <<EOF
GFXBOOT-BACKGROUND 0xB6875A
EOF
    fi
    if [ "$PROJECT" = kubuntu ]; then
	cat >> boot$N/isolinux/isolinux.cfg <<EOF
GFXBOOT-ACCESS-OPTIONS v1 v2 m1
EOF
    elif [ "$PROJECT" = xubuntu ]; then
	# v1 and m1 don't have the necessary sed calls for Xubuntu yet.
	cat >> boot$N/isolinux/isolinux.cfg <<EOF
GFXBOOT-ACCESS-OPTIONS v2 v3 m2
EOF
    fi
fi
if [ "$CDIMAGE_LIVE" = 1 ]; then
    cat >> boot$N/isolinux/isolinux.cfg <<EOF
APPEND $KERNEL_PARAMS $DEFAULT_PRESEED boot=casper initrd=/casper/initrd.gz quiet splash --
LABEL live
  menu label ^Start or install $CAPPROJECT
  kernel /casper/vmlinuz
  append $KERNEL_PARAMS $DEFAULT_PRESEED boot=casper initrd=/casper/initrd.gz quiet splash --
LABEL xforcevesa
  menu label Start $CAPPROJECT in safe ^graphics mode
  kernel /casper/vmlinuz
  append $KERNEL_PARAMS $DEFAULT_PRESEED boot=casper xforcevesa initrd=/casper/initrd.gz quiet splash --
LABEL driverupdates
  menu label Install with driver ^update CD
  kernel /casper/vmlinuz
  append $KERNEL_PARAMS $DEFAULT_PRESEED boot=casper debian-installer/driver-update=true initrd=/casper/initrd.gz quiet splash --
EOF
fi
if [ "$CDIMAGE_INSTALL" = 1 ]; then
    if [ "$CDIMAGE_LIVE" != 1 ]; then
	cat >> boot$N/isolinux/isolinux.cfg <<EOF
APPEND $KERNEL_PARAMS $DEFAULT_PRESEED initrd=/install/initrd.gz quiet --
EOF
    fi
    if [ "$PROJECT" = edubuntu ] || [ "$PROJECT" = ubuntu-server ]; then
	cat >> boot$N/isolinux/isolinux.cfg <<EOF
LABEL install
  menu label ^Install to the hard disk
  kernel /install/vmlinuz
  append $KERNEL_PARAMS $DEFAULT_PRESEED initrd=/install/initrd.gz quiet --
EOF
    else
	cat >> boot$N/isolinux/isolinux.cfg <<EOF
LABEL install
  menu label ^Install in text mode
  kernel /install/vmlinuz
  append $KERNEL_PARAMS $DEFAULT_PRESEED initrd=/install/initrd.gz quiet --
EOF
    fi
    cat >> boot$N/isolinux/isolinux.cfg <<EOF
LABEL linux
  menu hide
  kernel /install/vmlinuz
  append $KERNEL_PARAMS $DEFAULT_PRESEED initrd=/install/initrd.gz quiet --
LABEL cdrom
  menu hide
  kernel /install/vmlinuz
  append $KERNEL_PARAMS $DEFAULT_PRESEED initrd=/install/initrd.gz quiet --
LABEL expert
  menu hide
  kernel /install/vmlinuz
  append $KERNEL_PARAMS $DEFAULT_PRESEED priority=low initrd=/install/initrd.gz --
EOF
    if [ "$PROJECT" = edubuntu ]; then
	cat >> boot$N/isolinux/isolinux.cfg <<EOF
LABEL workstation
  menu label Install a ^workstation
  kernel /install/vmlinuz
  append $KERNEL_PARAMS file=/cdrom/preseed/workstation.seed initrd=/install/initrd.gz quiet --
EOF
    fi
    if [ "$CDIMAGE_DVD" = 1 ] && [ "$PROJECT" != edubuntu ] && [ "$PROJECT" != ubuntu-server ]; then
	cat >> boot$N/isolinux/isolinux.cfg <<EOF
LABEL server
  menu label Install a ser^ver
  kernel /install/vmlinuz
  append $KERNEL_PARAMS file=/cdrom/preseed/ubuntu-server.seed initrd=/install/initrd.gz quiet --
EOF
    fi
fi
if [ "$PROJECT" != edubuntu ] && [ "$PROJECT" != ubuntu-server ]; then
    if [ "$CDIMAGE_LIVE" = 1 ]; then
	cat >> boot$N/isolinux/isolinux.cfg <<EOF
LABEL oem
  menu label ^OEM install (for manufacturers)
  kernel /casper/vmlinuz
  append $KERNEL_PARAMS $DEFAULT_PRESEED boot=casper oem-config/enable=true initrd=/casper/initrd.gz quiet splash --
EOF
    else
	cat >> boot$N/isolinux/isolinux.cfg <<EOF
LABEL oem
  menu label ^OEM install (for manufacturers)
  kernel /install/vmlinuz
  append $KERNEL_PARAMS $DEFAULT_PRESEED oem-config/enable=true initrd=/install/initrd.gz quiet --
EOF
    fi
fi
if [ "$CDIMAGE_INSTALL_BASE" = 1 ] && [ "$PROJECT" != ubuntu-server ] && [ "$PROJECT" != ubuntustudio ]; then
    cat >> boot$N/isolinux/isolinux.cfg <<EOF
LABEL cli
  menu label Install a comm^and-line system
  kernel /install/vmlinuz
  append $KERNEL_PARAMS file=/cdrom/preseed/cli.seed initrd=/install/initrd.gz --
LABEL cli-expert
  menu hide
  kernel /install/vmlinuz
  append $KERNEL_PARAMS file=/cdrom/preseed/cli.seed priority=low initrd=/install/initrd.gz --
EOF
fi
if [ "$CDIMAGE_INSTALL" = 1 ] && [ "$PROJECT" = xubuntu ]; then
    cat >> boot$N/isolinux/isolinux.cfg <<EOF
LABEL ltsp-server
  menu label Install an ^LTSP server
  kernel /install/vmlinuz
  append $KERNEL_PARAMS file=/cdrom/preseed/ltsp.seed initrd=/install/initrd.gz --
EOF
fi
if [ "$CDIMAGE_LIVE" = 1 ]; then
    cat >> boot$N/isolinux/isolinux.cfg <<EOF
LABEL check
  menu label ^Check CD for defects
  kernel /casper/vmlinuz
  append $KERNEL_PARAMS boot=casper integrity-check initrd=/casper/initrd.gz quiet splash --
EOF
elif [ "$CDIMAGE_INSTALL_BASE" = 1 ]; then
    cat >> boot$N/isolinux/isolinux.cfg <<EOF
LABEL check
  menu label ^Check CD for defects
  kernel /install/vmlinuz
  append $KERNEL_PARAMS MENU=/bin/cdrom-checker-menu initrd=/install/initrd.gz quiet --
LABEL rescue
  menu label ^Rescue a broken system
  kernel /install/vmlinuz
  append $KERNEL_PARAMS rescue/enable=true initrd=/install/initrd.gz --
EOF
fi
cat >> boot$N/isolinux/isolinux.cfg <<EOF
LABEL memtest
  menu label ^Memory test
  kernel /install/mt86plus
  append -
LABEL hd
  menu label ^Boot from first hard disk
  localboot 0x80
  append -
DISPLAY isolinux.txt
TIMEOUT $timeout
PROMPT 1
F1 f1.txt
F2 f2.txt
F3 f3.txt
F4 f4.txt
F5 f5.txt
F6 f6.txt
F7 f7.txt
F8 f8.txt
F9 f9.txt
F0 f10.txt
EOF

fi

# write final lines to mkisofs_opts
if [ "$NN" = "1" ]; then
    echo -n "boot$N " >> $N.mkisofs_opts
else
    if [ -n "$THISTYPE" ]; then
	echo -n "-c boot/boot.catalog boot$N "  >> $N.mkisofs_opts
    fi
fi

# th,th, thats all
